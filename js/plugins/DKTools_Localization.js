"use strict";var Imported=Imported||{};Imported["DKTools_Localization"]="5.5.8";if(Imported["DKTools"]){DKTools.PluginManager.requirePlugin("DKTools","11.2.5")}else{throw new Error('No plugin "DKTools"! Plugin "DKTools_Localization" will not work!')}const LocalizationParam=new DKTools.ParameterManager("DKTools_Localization");DKTools.PluginCommandManager.set("UpdateLocalizationTags",async()=>{if(!Utils.isNwjs()){return}const directory=new DKTools.IO.Directory("data/");const result=await directory.getJsonFilesAsync();if(result.status!==DKTools.IO.OK){DKTools.Utils.throwError(new Error('Cannot load json files from folder "data/"'));return}if(result.data.length===0){DKTools.Utils.throwError(new Error('Folder "data/" does not contain json files'));return}const ignoredFiles=LocalizationParam.get("Ignored Files");const files=_.filter(result.data,file=>!ignoredFiles.includes(file.getName()));if(files.length===0){return}const extension=DKTools.Localization._fileExtension;const regex=DKTools.Localization.regexTag;const data={};const processMatch=(regex,value)=>{let result=regex.exec(value);while(result!==null){const match=result[1];if(extension===".json"){_.set(data,match,"")}else{data[match]=""}result=regex.exec(value)}};const parseObject=object=>{if(!(object instanceof Object)){return}_.forEach(object,value=>{if(DKTools.Utils.isString(value)){processMatch(regex,value)}else{parseObject(value)}})};for(const file of files){const fileData=await file.loadJsonAsync().then(result=>result.data);if(!fileData){continue}if(/Map\d{3,}/.test(file.getName())&&DKTools.Utils.isString(fileData.displayName)){processMatch(regex,fileData.displayName)}_.forEach(fileData,parseObject)}$plugins.forEach(plugin=>{parseObject(new DKTools.ParameterManager(plugin.name)._params)});if(extension===".json"){const promises=DKTools.Localization.locales.map(async locale=>{const basePath=DKTools.Localization._dataPath+locale;const file=new DKTools.IO.File(basePath+".json");const localizationData=await DKTools.Localization._loadData(locale);let needSave=false;if(localizationData){const newData={};_.forEach(data,(value,key)=>{if(_.get(localizationData,key)===undefined){newData[key]=value;needSave=true}});if(!needSave){return Promise.resolve()}const newFile=new DKTools.IO.File(basePath+`new_exported_tags_${locale}.json`);return newFile.saveJsonAsync(newData,{createDirectory:true})}else{return file.saveJsonAsync(data,{createDirectory:true})}});Promise.all(promises).then(()=>{alert("Localization tags updated!")})}else{const basePath=DKTools.Localization._dataPath;const locales=DKTools.Localization.locales;const temp={};const promises=DKTools.Localization.locales.map(async locale=>{const localizationData=await DKTools.Localization._loadData(locale);if(localizationData){const newData={};let needSave=false;_.forEach(data,(value,key)=>{if(localizationData[key]===undefined){newData[key]=value;needSave=true}});if(!needSave){temp[locale]=[];return}temp[locale]=Object.keys(newData).sort((a,b)=>a.length-b.length)}else{temp[locale]=Object.keys(data).sort((a,b)=>a.length-b.length)}});Promise.all(promises).then(()=>{if(Object.keys(temp).length>0){const delimiter=LocalizationParam.get("CSV delimiter")||";";const max=Math.max(...locales.map(locale=>temp[locale].length));const content=[];for(let i=0;i<max;i++){const row=[];for(const locale of locales){row.push(temp[locale][i]||"")}if(row.every(value=>!value)){continue}content.push(row.join(delimiter))}if(content.length===0){return}const header=locales.join(delimiter);const rows=[header].concat(content).join("\n");const newFile=new DKTools.IO.File(basePath+"new_exported_tags.csv");newFile.saveAsync(rows,{createDirectory:true}).then(()=>{alert("Localization tags updated!")})}})}});DKTools.PluginCommandManager.set("ClearLocalizationCache",()=>{DKTools.Localization.clearCache()});DKTools.PluginCommandManager.set("ExportAllText",async args=>{if(!Utils.isNwjs()){return}const directory=new DKTools.IO.Directory("data/");const result=await directory.getJsonFilesAsync();if(result.status!==DKTools.IO.OK){DKTools.Utils.throwError(new Error('Cannot load json files from folder "data/"'));return}if(result.data.length===0){DKTools.Utils.throwError(new Error('Folder "data/" does not contain json files'));return}const ignoredFiles=LocalizationParam.get("Ignored Files");const files=_.filter(result.data,file=>!ignoredFiles.includes(file.getName()));if(files.length===0){return}const exportFile=new DKTools.IO.File(DKTools.Localization._dataPath+"/export.txt");const ignoreTags=eval(args[0])||false;const regex=DKTools.Localization.regexTag;const data={};const parseObject=object=>{if(!(object instanceof Object)){return}_.forEach(object,value=>{if(DKTools.Utils.isString(value)){try{parseObject(JSON.parse(value))}catch(e){if(!data[value]&&(!ignoreTags||!value.match(regex))){data[value]=true}}}else{parseObject(value)}})};for(const file of files){const fileData=await file.loadJsonAsync().then(result=>result.data);if(!fileData){continue}if(/Map\d{3,}/.test(file.getName())&&DKTools.Utils.isString(fileData.displayName)){if(!data[fileData.displayName]){data[fileData.displayName]=true}}_.forEach(fileData,parseObject)}$plugins.forEach(plugin=>{parseObject(new DKTools.ParameterManager(plugin.name)._params)});exportFile.saveAsync(Object.keys(data).join("\n")).then(()=>{alert(`All text was exported! File path: ${exportFile.getFullPath()}`)})});DKTools.PluginCommandManager.set("WrapDialogText",async args=>{if(!Utils.isNwjs()){return}if(!window.confirm("Are you sure you want to wrap dialog text? It is recommended to backup your files!")){return}const directory=new DKTools.IO.Directory("data/");const result=await directory.getJsonFilesAsync();if(result.status!==DKTools.IO.OK){DKTools.Utils.throwError(new Error('Cannot load json files from folder "data/"'));return}if(result.data.length===0){DKTools.Utils.throwError(new Error('Folder "data/" does not contain json files'));return}let files=[];if(args.map==="Current map"){args.map=$gameMap.mapId()}switch(args.map){case"All maps":files=_.filter(result.data,file=>file.getName().match(/Map\d{3,}/));break;default:files=_.filter(result.data,file=>{const match=file.getName().match(/Map\d{3,}/);return match&&parseInt(match[0].substring(3))===parseInt(args.map)});break}if(files.length===0){return}const processEventText=text=>{if(!text.startsWith("{")&&!text.endsWith("}")){return{success:true,text:`{${text}}`}}return{success:false,text:text}};const processMapEvents=events=>{let updated=0;events.forEach(event=>{if(event&&event.pages){event.pages.forEach(page=>{if(page.list){page.list.forEach(command=>{if(command.code===401){const result=processEventText(command.parameters[0]);if(result.success){command.parameters[0]=result.text;updated++}}else if(command.code===102){let success=false;command.parameters[0].forEach((text,index)=>{const result=processEventText(text);if(result.success){command.parameters[0][index]=result.text;success=true}});if(success){updated++}}})}})}});return updated};let updatedFiles=0;files.forEach(async file=>{const result=await file.loadJsonAsync();if(result.status!==DKTools.IO.OK){console.error(`Cannot load file ${file.getFullName()}`);return}const map=result.data;const updatedStrings=processMapEvents(map.events);if(updatedStrings===0){return}const saveResult=await file.saveJsonAsync(map);if(saveResult===DKTools.IO.OK){console.info(`File ${file.getFullName()} was saved. Updated ${updatedStrings} strings`);updatedFiles++}else{console.error(`Cannot save file ${file.getFullName()}`)}});if(updatedFiles>0){alert(`Updated ${updatedFiles} files! Reload the RPG Maker program!`)}else{alert("No files were updated! Check the plugin command parameters.")}});DKTools.Localization=class{constructor(){return DKTools.Localization}static get _localePath(){return DKTools.IO.normalizePath(LocalizationParam.get("Locale File"))}static get _dataPath(){return DKTools.IO.normalizePath(LocalizationParam.get("Localization Folder")+"/")}static get _webStoragePath(){return"RPG Locale"}static get _file(){return new DKTools.IO.File(this._localePath)}static get _fileExtension(){return LocalizationParam.get("Localization Extension")||".json"}static async _initializeLanguages(){const source=LocalizationParam.get("Languages Source")||"parameters";let languages;if(source==="json"){const file=new DKTools.IO.File("data/Languages.json");const fonts=LocalizationParam.get("Fonts");const helpText=LocalizationParam.get("Help Text");this._fonts=[];this._helpText=[];if(!file.exists()&&Utils.isNwjs()){languages=LocalizationParam.get("Languages");if(languages.length===0){languages=[{Locale:"en",Language:"English",Primary:true},{Locale:"ru",Language:"Русский",Primary:false}]}languages.forEach(data=>{const font=fonts.find(f=>f["Locale"]===data["Locale"]);const help=helpText.find(d=>d["Locale"]===data["Locale"]);if(font&&font["Font"]){data["Font"]=font["Font"]}else{data["Font"]=null}if(help&&help["Text"]){data["Help Text"]=help["Text"]}else{data["Help Text"]=null}});const result=await file.saveJsonAsync(languages);if(result===DKTools.IO.OK){console.log(`Created a file for languages: ${file.getFullPath()}`)}else{console.error("Localization can not create a file for languages!")}}else{const result=await file.loadJsonAsync();if(result.status===DKTools.IO.OK){languages=result.data}else{DKTools.Utils.throwError(new Error(`Can not load languages data from file: ${file.getFullPath()}`))}}}else{languages=LocalizationParam.get("Languages")}languages.forEach(data=>{this._languages[data["Locale"]]=data["Language"];if(!this._primaryLanguage&&data["Primary"]){this._primaryLanguage=data}if(this._fonts&&data["Font"]){this._fonts.push({Font:data["Font"],Locale:data["Locale"]})}if(this._helpText&&data["Help Text"]){this._helpText.push({Text:data["Help Text"],Locale:data["Locale"]})}})}static async _initializeLocale(){const locales=this.locales;if(locales.length>0){await this.loadLocale();if(!this._locale){const firstLaunch=LocalizationParam.get("First Launch");if(this._primaryLanguage){this._locale=this._primaryLanguage["Locale"]}else{this._locale=locales[0];if(!firstLaunch){console.warn("You have not installed the primary language of the game! Automatically selected locale: "+this._locale)}}if(!firstLaunch){await this.saveLocale()}}}else{await this.removeLocale();throw new Error('Add at least one language! See help of plugin "DKTools_Localization"!')}}static _initializeDecrypterIgnoreList(){this.locales.forEach(locale=>{const path=`img/system/${locale}/Window.png`;const file=new DKTools.IO.File(path);if(file.exists()){Decrypter._ignoreList.push(path)}})}static async initialize(){this._locale="";this._languages={};this._parseDepth=LocalizationParam.get("Parse Depth");await this._initializeLanguages();await this._initializeLocale();await this._initializeDecrypterIgnoreList();if(Utils.isNwjs()&&Utils.isTest()){await this._checkData()}await this.clearCache();await this.loadData();await this.loadFont();await this.updateLoadingImage();this._isReady=true}static clearCache(){this._cache={};this._cacheVariables={};this._folders={}}static async _checkJsonData(){const dataPath=this._dataPath;const locales=this.locales;for(const locale of locales){const basePath=dataPath+locale;const directory=new DKTools.IO.Directory(basePath);const file=new DKTools.IO.File(directory.getFullPath()+"/main.json");const oldVersionsFile=new DKTools.IO.File(basePath+".json");if(oldVersionsFile.exists()){continue}if(!directory.exists()){const status=await directory.createAsync();if(status===DKTools.IO.OK){console.log(`Created a directory for locale (${locale}): ${directory.getFullPath()}`)}else{console.error(`Localization can not create a directory for locale (${locale}): ${directory.getFullPath()}`)}}if(!file.exists()&&directory.exists()){const files=await this._getLocalizationFiles(directory);if(files.length>0){return}const status=await file.saveJsonAsync({attention:"USE UTF-8 encoding!!!"});if(status===DKTools.IO.OK){console.log(`Created a file for locale (${locale}): ${file.getFullPath()}`)}else{console.error(`Localization can not create a file for locale (${locale}): ${file.getFullPath()}`)}}}}static async _checkCsvData(){const locales=this.locales;const directory=new DKTools.IO.Directory(this._dataPath);const files=await this._getLocalizationFiles(directory);if(files.length>0){return}const file=new DKTools.IO.File(directory.getFullPath()+"/main.csv");const delimiter=LocalizationParam.get("CSV delimiter")||";";const status=await file.saveAsync(`tag;${locales.join(delimiter)}\nUSE UTF-8 encoding!!!`);if(status===DKTools.IO.OK){console.log(`Created a file for localization: ${file.getFullPath()}`)}else{console.error(`Localization can not create a file for localization: ${file.getFullPath()}`)}}static async _checkData(){const dataPath=this._dataPath;const directory=new DKTools.IO.Directory(dataPath);if(!directory.exists()){const status=await directory.createAsync();if(status===DKTools.IO.OK){console.log("Created a directory for localization: "+dataPath)}else{console.error("Localization can not create a directory for localization: "+dataPath)}}if(this._fileExtension===".json"){await this._checkJsonData()}else{await this._checkCsvData()}}static checkLocale(locale){return this.locales.includes(locale)}static checkCache(variableId){if(!this._cacheVariables[variableId]){return}this._cache=Object.keys(this._cache).reduce((acc,key)=>{const cache=this._cache[key];if(cache.variables&&!cache.variables.includes(variableId)){acc[key]=cache}return acc},{})}static _getLocalizationFiles(directory,extension=this._fileExtension){const template=new RegExp(`(${extension})`);let promise;if(LocalizationParam.get("Check Subfolders")){promise=directory.findFilesAsync({searchLimit:500,template:template})}else{promise=directory.getFilesAsync({template:template})}return promise.then(result=>result.data.filter(file=>!file.getName().startsWith("new_exported_tags")))}static _getText(text){const cacheVariables=this._cacheVariables;const parseDepth=this._parseDepth;const regexVar=this.regexVar;const regex=this.regexTag;const data=this._data;const initialText=text;const variables=[];const varReplace=text=>{return text.replace(regexVar,(string,match)=>{const id=Number(match);cacheVariables[id]=true;variables.push(id);needCache=true;return $gameVariables.value(id)})};const textReplace=(text,regex)=>{return text.replace(regex,(string,match)=>{if(data.hasOwnProperty(match)){needCache=true;return data[match]}else{const value=_.get(data,match);if(DKTools.Utils.isString(value)){needCache=true;return value}}return match})};const parseText=text=>{text=varReplace(text);text=textReplace(text,regex);text=varReplace(text);return text};let needCache=false;for(let i=0;i<parseDepth;i++){const temp=text;text=parseText(text);if(!needCache&&text===temp){break}}if(needCache&&initialText.length>=LocalizationParam.get("Text Length")){this._cache[initialText]={variables:variables,text:text}}return text}static getText(text){if(text==null){return text}text=String(text);if(text.length<3||!this._data){return text}if(this._cache[text]){return this._cache[text].text}return this._getText(text)}static getHelpText(locale){return(this._helpText||LocalizationParam.get("Help Text")).filter(data=>data["Locale"]===locale).map(data=>data["Text"])[0]||null}static getPrevLocale(){const locales=this.locales;let index=locales.indexOf(this._locale);if(index>=0){index--;if(index<0){index=locales.length-1}return locales[index]}return null}static getNextLocale(){const locales=this.locales;let index=locales.indexOf(this._locale);if(index>=0){index++;if(index===locales.length){index=0}return locales[index]}return null}static getPrevLanguage(){const locale=this.getPrevLocale();if(locale){return this._languages[locale]}return null}static getNextLanguage(){const locale=this.getNextLocale();if(locale){return this._languages[locale]}return null}static getLanguageByLocale(locale){return this._languages[locale]}static getLocaleByLanguage(language){const languages=_.reduce(this._languages,(acc,value,key)=>{acc[value]=key;return acc},{});return languages[language]}static getPrimaryLocale(){return LocalizationParam.get("Languages",{Primary:true},{key:"Locale"})||null}static getPrimaryLanguage(){return LocalizationParam.get("Languages",{Primary:true},{key:"Language"})||null}static getAudioFolder(folder,filename,locale=this.locale){if(!folder||!filename||!DKTools.IO.isReady()||!Utils.isNwjs()&&DKTools.IO.mode===DKTools.IO.MODE_NWJS){return folder}const basePath=AudioManager._path;const normalizedFolder=DKTools.IO.reverseSlashes(DKTools.IO.normalizePath(folder+"/"));const key=DKTools.IO.reverseSlashes(DKTools.IO.normalizePath(normalizedFolder+filename));const currentLocale=this.locale;if(this._folders[key]&&locale===currentLocale){return this._folders[key]}const newFolder=DKTools.IO.normalizePath(normalizedFolder+locale+"/");const newFileName=filename+AudioManager.audioFileExt();let newPath=DKTools.IO.normalizePath(basePath+"/"+newFolder+"/"+newFileName);if(new DKTools.IO.File(newPath).exists()){if(locale===currentLocale){this._folders[key]=newFolder}return newFolder}if(Decrypter.hasEncryptedAudio||!$dataSystem){newPath=DKTools.IO.normalizePath(basePath+"/"+newFolder+"/"+Decrypter.extToEncryptExt(newFileName));if(new DKTools.IO.File(newPath).exists()){if(locale===currentLocale){this._folders[key]=newFolder}return newFolder}}if(locale===currentLocale){this._folders[key]=folder}return folder}static getImageFolder(folder,filename,locale=this.locale){if(!folder||!filename||!DKTools.IO.isReady()||!Utils.isNwjs()&&DKTools.IO.mode===DKTools.IO.MODE_NWJS){return folder}const key=DKTools.IO.reverseSlashes(DKTools.IO.normalizePath(folder+"/"+filename));const currentLocale=this.locale;if(this._folders[key]&&locale===currentLocale){return this._folders[key]}const newFolder=DKTools.IO.normalizePath(folder+"/"+locale+"/");const newFileName=filename+ImageManager.imageFileExt();let newPath=DKTools.IO.normalizePath(newFolder+"/"+newFileName);if(new DKTools.IO.File(newPath).exists()){if(locale===currentLocale){this._folders[key]=newFolder}return newFolder}if(Decrypter.hasEncryptedImages||!$dataSystem){newPath=DKTools.IO.normalizePath(newFolder+"/"+Decrypter.extToEncryptExt(newFileName));if(new DKTools.IO.File(newPath).exists()){if(locale===currentLocale){this._folders[key]=newFolder}return newFolder}}if(!folder.endsWith("/")){folder+="/"}if(locale===currentLocale){this._folders[key]=folder}return folder}static getVideoFolder(folder,filename,locale=this.locale){if(!folder||!filename||!DKTools.IO.isReady()||!Utils.isNwjs()&&DKTools.IO.mode===DKTools.IO.MODE_NWJS){return folder}const key=DKTools.IO.reverseSlashes(DKTools.IO.normalizePath(folder+"/"+filename));const currentLocale=this.locale;if(this._folders[key]&&locale===currentLocale){return this._folders[key]}const newFolder=DKTools.IO.normalizePath(folder+"/"+locale+"/");const newPath=DKTools.IO.normalizePath(newFolder+"/"+filename);const file=new DKTools.IO.File(newPath);if(file.exists()){if(locale===currentLocale){this._folders[key]=newFolder}return newFolder}if(locale===currentLocale){this._folders[key]=folder}return folder}static isReady(){return this._isReady}static isLocaleFileExists(){if(Utils.isNwjs()){return this._file.exists()}return DKTools.IO.WebStorage.exists(this._webStoragePath)}static async _loadData(locale){const extension=this._fileExtension;const directoryPath=extension===".json"?this._dataPath+locale:this._dataPath;const directory=new DKTools.IO.Directory(directoryPath);const delimiter=LocalizationParam.get("CSV delimiter")||";";const data={};const processJsonFile=async file=>{const result=await file.loadJsonAsync();if(result.status===DKTools.IO.OK){if(Array.isArray(result.data)){data[file.getName()]=result.data;return}_.forEach(result.data,(value,key)=>{if(data[key]===undefined){data[key]=value}})}else{const fullPath=file.getFullPath();if(result.status===DKTools.IO.ERROR_PARSING_DATA){let message=`Can not parse JSON data from file: ${fullPath}.`;if(result.error&&result.error.message){message+=" Description: "+result.error.message}DKTools.Utils.throwError(new Error(message))}else{DKTools.Utils.throwError(new Error(`Can not load localization data from file: ${fullPath}`))}}return Promise.resolve()};const processCsvFile=async file=>{const result=await file.loadAsync();if(result.status===DKTools.IO.OK){const rows=result.data.split("\n");if(rows.length===0){DKTools.Utils.throwError(new Error(`Localization CSV file is empty: ${file.getFullPath()}`))}const header=rows[0].split(delimiter);if(header.length<=1){DKTools.Utils.throwError(new Error(`Localization file "${file.getFullPath()}" failed to parse first row by delimiter "${delimiter}" for locale "${locale}"`));return Promise.reject()}const localeIndex=header.findIndex(key=>key.trim().toLowerCase()===locale.toLowerCase());if(localeIndex===-1){DKTools.Utils.throwError(new Error(`Localization file "${file.getFullPath()}" does not include translation for locale "${locale}"`));return Promise.reject()}else{rows.slice(1).forEach((row,index)=>{if(!row){return}const values=row.split(delimiter);if(values.length<=1){console.error(`Localization file "${file.getFullPath()}" failed to parse row ${index+1} by delimiter "${delimiter}". Skipped...`);return}const key=values[0];if(data[key]===undefined){data[key]=values[localeIndex].trim().replace(/\\n/g,"\n")}})}}return Promise.resolve()};if(directory.exists()){const files=await this._getLocalizationFiles(directory,extension);if(files.length>0){if(extension===".json"){await Promise.all(files.map(processJsonFile))}else{await Promise.all(files.map(processCsvFile))}}else{DKTools.Utils.throwError(new Error(`Localization directory is empty: ${directoryPath}`))}}else if(extension===".json"){const filePath=directoryPath+extension;const file=new DKTools.IO.File(filePath);if(file.exists()){await processJsonFile(file)}else{DKTools.Utils.throwError(new Error(`Localization file does not exist: ${filePath}`))}}return data}static async loadLocale(){let locale;if(Utils.isNwjs()){locale=await this._file.loadAsync().then(result=>result.data)}else{locale=DKTools.IO.WebStorage.load(this._webStoragePath).data}if(this.checkLocale(locale)){this._locale=locale}else if(!LocalizationParam.get("First Launch")){await this.removeLocale()}}static async loadData(){this._data=await this._loadData(this._locale)}static async loadFont(){return new Promise(resolve=>{const font=(this._fonts||LocalizationParam.get("Fonts")).find(f=>f["Locale"]===this.locale);const fontPath=font?font["Font"]:LocalizationParam.get("Standard Font");Graphics.loadFont("GameFont","fonts/"+fontPath);if(Graphics.isFontLoaded("GameFont")){resolve()}else{const interval=setInterval(()=>{if(Graphics.isFontLoaded("GameFont")){clearInterval(interval);resolve()}},50)}})}static async saveLocale(){if(Utils.isNwjs()){await this._file.saveAsync(this._locale,{createDirectory:true})}else{DKTools.IO.WebStorage.save(this._webStoragePath,this._locale)}}static async removeLocale(){if(Utils.isNwjs()){await this._file.removeAsync()}else{DKTools.IO.WebStorage.remove(this._webStoragePath)}}static async selectPrevLocale(){return this.selectLocale(this.getPrevLocale())}static async selectNextLocale(){return this.selectLocale(this.getNextLocale())}static async selectLocale(locale){if(this.checkLocale(locale)){const previousLocale=this._locale;this._locale=locale;if(this._locale!==previousLocale||!this.isLocaleFileExists()){await this.saveLocale()}if(this._locale!==previousLocale){await this._onLocaleChange(previousLocale)}}else{return Promise.reject("You are trying to establish a non-existent locale: "+locale)}}static async _onLocaleChange(previousLocale){await this.clearCache();await this.loadData();await this.loadFont();await this.updateLoadingImage();await this.updateGameTitle();for(const listener of this._listeners){await listener(previousLocale,this._locale)}}static addChangeLocaleListener(listener){if(DKTools.Utils.isFunction(listener)){this._listeners.push(listener)}}static updateGameTitle(){document.title=this.getText($dataSystem.gameTitle)}static updateLoadingImage(){if(!Utils.isNwjs()&&DKTools.IO.mode===DKTools.IO.MODE_NWJS){return}const filename="Loading.png";const basePath=DKTools.IO.normalizePath("img/system/"+this._locale);const fullPath=DKTools.IO.normalizePath(basePath+"/"+filename);if(DKTools.IO.pathExists(fullPath)){Graphics.setLoadingImage(fullPath)}else if(Decrypter.hasEncryptedImages||!$gameSystem){if(DKTools.IO.pathExists(basePath+"/"+Decrypter.extToEncryptExt(filename))){Graphics.setLoadingImage(fullPath)}}}};Object.defineProperties(DKTools.Localization,{_folders:{value:{},writable:true},_listeners:{value:[]},regexVar:{value:/\\VAR\[(\d+)\]/g},regexTag:{value:/\{(.*?)\}/g},locale:{get:function(){return this._locale},configurable:true},language:{get:function(){return this._languages[this._locale]},configurable:true},languages:{get:function(){return Object.values(this._languages)},configurable:true},locales:{get:function(){return Object.keys(this._languages)},configurable:true}});const Localization_DKTools_StartupManager_initializeModules=DKTools.StartupManager.initializeModules;DKTools.StartupManager.initializeModules=async function(){await Localization_DKTools_StartupManager_initializeModules.apply(this,arguments);await DKTools.Localization.initialize()};const Localization_DKTools_PreloadManager_processAudioFile=DKTools.PreloadManager._processAudioFile;DKTools.PreloadManager._processAudioFile=function(file,object){const name=file.getName();const path=DKTools.Localization.getAudioFolder(file.getDirectoryName(),name)+name+file.getExtension();Localization_DKTools_PreloadManager_processAudioFile.call(this,new DKTools.IO.File(AudioManager._path+path),object)};const Localization_DKTools_PreloadManager_processImageFile=DKTools.PreloadManager._processImageFile;DKTools.PreloadManager._processImageFile=function(file,object){const name=file.getName();const path=DKTools.Localization.getImageFolder(file.getPath(),name)+name+file.getExtension();Localization_DKTools_PreloadManager_processImageFile.call(this,new DKTools.IO.File(path),object)};const Localization_DKTools_Base_textWrap=DKTools.Base.prototype.textWrap;DKTools.Base.prototype.textWrap=function(text,options={}){return Localization_DKTools_Base_textWrap.call(this,DKTools.Localization.getText(text),options)};const Localization_DKTools_Base_drawTextEx=DKTools.Base.prototype.drawTextEx;DKTools.Base.prototype.drawTextEx=function(text,options){return Localization_DKTools_Base_drawTextEx.call(this,DKTools.Localization.getText(text),options)};const Localization_DKTools_Base_convertEscapeCharacters=DKTools.Base.prototype.convertEscapeCharacters;DKTools.Base.prototype.convertEscapeCharacters=function(){return DKTools.Localization.getText(Localization_DKTools_Base_convertEscapeCharacters.apply(this,arguments)).replace(/\x1blanguage/gi,()=>DKTools.Localization.language)};const Localization_DKTools_Sprite_textWrap=DKTools.Sprite.prototype.textWrap;DKTools.Sprite.prototype.textWrap=function(text,options={}){return Localization_DKTools_Sprite_textWrap.call(this,DKTools.Localization.getText(text),options)};const Localization_DKTools_Sprite_drawTextEx=DKTools.Sprite.prototype.drawTextEx;DKTools.Sprite.prototype.drawTextEx=function(text,options){return Localization_DKTools_Sprite_drawTextEx.call(this,DKTools.Localization.getText(text),options)};const Localization_DKTools_Sprite_convertEscapeCharacters=DKTools.Sprite.prototype.convertEscapeCharacters;DKTools.Sprite.prototype.convertEscapeCharacters=function(){return DKTools.Localization.getText(Localization_DKTools_Sprite_convertEscapeCharacters.apply(this,arguments)).replace(/\x1blanguage/gi,()=>DKTools.Localization.language)};const Localization_DKTools_Sprite_processEscapeCharacter=DKTools.Sprite.prototype.processEscapeCharacter;DKTools.Sprite.prototype.processEscapeCharacter=function(code,textState){if(code==="MFS"){this.makeFontSmaller()}else if(code==="MFB"){this.makeFontBigger()}else{Localization_DKTools_Sprite_processEscapeCharacter.apply(this,arguments)}};const Localization_DKTools_Window_textWrap=DKTools.Window.prototype.textWrap;DKTools.Window.prototype.textWrap=function(text,options={}){return Localization_DKTools_Window_textWrap.call(this,DKTools.Localization.getText(text),options)};const Localization_Bitmap_drawText=Bitmap.prototype.drawText;Bitmap.prototype.drawText=function(text,x,y,maxWidth,lineHeight,align){Localization_Bitmap_drawText.call(this,DKTools.Localization.getText(text),x,y,maxWidth,lineHeight,align)};const Localization_Graphics_playVideo=Graphics.playVideo;Graphics.playVideo=function(src){const parts=src.split("/");const filename=parts.pop();const folder=DKTools.Localization.getVideoFolder(parts.join("/"),filename);Localization_Graphics_playVideo.call(this,folder+"/"+filename)};const Localization_ImageManager_loadBitmap=ImageManager.loadBitmap;ImageManager.loadBitmap=function(folder,filename,hue,smooth){return Localization_ImageManager_loadBitmap.call(this,DKTools.Localization.getImageFolder(folder,filename),filename,hue,smooth)};const Localization_ImageManager_reserveBitmap=ImageManager.reserveBitmap;ImageManager.reserveBitmap=function(folder,filename,hue,smooth,reservationId){return Localization_ImageManager_reserveBitmap.call(this,DKTools.Localization.getImageFolder(folder,filename),filename,hue,smooth,reservationId)};const Localization_ImageManager_requestBitmap=ImageManager.requestBitmap;ImageManager.requestBitmap=function(folder,filename,hue,smooth){return Localization_ImageManager_requestBitmap.call(this,DKTools.Localization.getImageFolder(folder,filename),filename,hue,smooth)};const Localization_AudioManager_createBuffer=AudioManager.createBuffer;AudioManager.createBuffer=function(folder,name,reservationId){return Localization_AudioManager_createBuffer.call(this,DKTools.Localization.getAudioFolder(folder,name),name,reservationId)};const Localization_TextManager_basic=TextManager.basic;TextManager.basic=function(basicId){return DKTools.Localization.getText(Localization_TextManager_basic.apply(this,arguments))};const Localization_TextManager_param=TextManager.param;TextManager.param=function(paramId){return DKTools.Localization.getText(Localization_TextManager_param.apply(this,arguments))};const Localization_TextManager_command=TextManager.command;TextManager.command=function(commandId){return DKTools.Localization.getText(Localization_TextManager_command.apply(this,arguments))};const Localization_TextManager_message=TextManager.message;TextManager.message=function(messageId){return DKTools.Localization.getText(Localization_TextManager_message.apply(this,arguments))};Object.defineProperty(TextManager,"currencyUnit",{get:function(){return DKTools.Localization.getText($dataSystem.currencyUnit)},configurable:true});const Localization_Game_System_isJapanese=Game_System.prototype.isJapanese;Game_System.prototype.isJapanese=function(){return Boolean(Localization_Game_System_isJapanese.apply(this,arguments)||DKTools.Localization.locale.match(/^ja/))};const Localization_Game_System_isChinese=Game_System.prototype.isChinese;Game_System.prototype.isChinese=function(){return Boolean(Localization_Game_System_isChinese.apply(this,arguments)||DKTools.Localization.locale.match(/^zh/))};const Localization_Game_System_isKorean=Game_System.prototype.isKorean;Game_System.prototype.isKorean=function(){return Boolean(Localization_Game_System_isKorean.apply(this,arguments)||DKTools.Localization.locale.match(/^ko/))};const Localization_Game_System_isCJK=Game_System.prototype.isCJK;Game_System.prototype.isCJK=function(){return Boolean(Localization_Game_System_isCJK.apply(this,arguments)||DKTools.Localization.locale.match(/^(ja|zh|ko)/))};Game_System.prototype.isRussian=function(){return Boolean(DKTools.Localization.locale.match(/^ru/))};const Localization_Game_Message_clear=Game_Message.prototype.clear;Game_Message.prototype.clear=function(){Localization_Game_Message_clear.apply(this,arguments);this._originalTexts=[];this._originalChoices=[]};const Localization_Game_Message_add=Game_Message.prototype.add;Game_Message.prototype.add=function(text){this._originalTexts.push(text);Localization_Game_Message_add.call(this,DKTools.Localization.getText(text))};const Localization_Game_Message_setChoices=Game_Message.prototype.setChoices;Game_Message.prototype.setChoices=function(choices,defaultType,cancelType){this._originalChoices=choices.slice();choices=choices.map(choice=>DKTools.Localization.getText(choice));Localization_Game_Message_setChoices.call(this,choices,defaultType,cancelType)};Game_Message.prototype.allOriginalText=function(){return this._originalTexts.join("\n")};Game_Message.prototype.getOriginalTexts=function(){return this._originalTexts.slice()};Game_Message.prototype.getOriginalChoices=function(){return this._originalChoices.slice()};const Localization_Game_Variables_setValue=Game_Variables.prototype.setValue;Game_Variables.prototype.setValue=function(id,value){const lastValue=this.value(id);Localization_Game_Variables_setValue.apply(this,arguments);if(lastValue!==this.value(id)){DKTools.Localization.checkCache(id)}};const Localization_Game_Map_setup=Game_Map.prototype.setup;Game_Map.prototype.setup=function(mapId){Localization_Game_Map_setup.apply(this,arguments);DKTools.Localization.clearCache()};const Localization_Window_Base_textWidth=Window_Base.prototype.textWidth;Window_Base.prototype.textWidth=function(text){return Localization_Window_Base_textWidth.call(this,DKTools.Localization.getText(text))};const Localization_Window_Base_drawTextEx=Window_Base.prototype.drawTextEx;Window_Base.prototype.drawTextEx=function(text,x,y){return Localization_Window_Base_drawTextEx.call(this,DKTools.Localization.getText(text),x,y)};const Localization_Window_Base_actorName=Window_Base.prototype.actorName;Window_Base.prototype.actorName=function(n){return DKTools.Localization.getText(Localization_Window_Base_actorName.apply(this,arguments))};const Localization_Window_Base_partyMemberName=Window_Base.prototype.partyMemberName;Window_Base.prototype.partyMemberName=function(n){return DKTools.Localization.getText(Localization_Window_Base_partyMemberName.apply(this,arguments))};const Localization_Window_Base_convertEscapeCharacters=Window_Base.prototype.convertEscapeCharacters;Window_Base.prototype.convertEscapeCharacters=function(text){return DKTools.Localization.getText(Localization_Window_Base_convertEscapeCharacters.apply(this,arguments)).replace(/\x1blanguage/gi,()=>DKTools.Localization.language)};const Localization_Window_Base_processEscapeCharacter=Window_Base.prototype.processEscapeCharacter;Window_Base.prototype.processEscapeCharacter=function(code,textState){if(code==="MFS"){this.makeFontSmaller()}else if(code==="MFB"){this.makeFontBigger()}else{Localization_Window_Base_processEscapeCharacter.apply(this,arguments)}};const Localization_Window_Command_commandName=Window_Command.prototype.commandName;Window_Command.prototype.commandName=function(index){return DKTools.Localization.getText(this.convertEscapeCharacters(Localization_Window_Command_commandName.apply(this,arguments)))};const Localization_Window_TitleCommand_makeCommandList=Window_TitleCommand.prototype.makeCommandList;Window_TitleCommand.prototype.makeCommandList=function(){Localization_Window_TitleCommand_makeCommandList.apply(this,arguments);if(LocalizationParam.get("Show Command")){this.addLocaleCommand()}};Window_TitleCommand.prototype.addLocaleCommand=function(){this.addCommand(LocalizationParam.get("Command Name"),"locale")};const Localization_Window_NameEdit_initialize=Window_NameEdit.prototype.initialize;Window_NameEdit.prototype.initialize=function(actor,maxLength){Localization_Window_NameEdit_initialize.apply(this,arguments);this._name=DKTools.Localization.getText(this._name).slice(0,this._maxLength);this._index=this._name.length};const Localization_Window_Options_makeCommandList=Window_Options.prototype.makeCommandList;Window_Options.prototype.makeCommandList=function(){Localization_Window_Options_makeCommandList.apply(this,arguments);if(!Imported["YEP_OptionsCore"]&&LocalizationParam.get("Show Options Command")){this.addLocaleCommand()}};Window_Options.prototype.addLocaleCommand=function(){this.addCommand(LocalizationParam.get("Options Command Name"),"locale")};const Localization_Window_Options_statusText=Window_Options.prototype.statusText;Window_Options.prototype.statusText=function(index){if(this.commandSymbol(index)==="locale"){return DKTools.Localization.language}return Localization_Window_Options_statusText.apply(this,arguments)};const Localization_Window_Options_booleanStatusText=Window_Options.prototype.booleanStatusText;Window_Options.prototype.booleanStatusText=function(value){if(LocalizationParam.get("Rename Options Text")){return value?LocalizationParam.get("Options ON Text"):LocalizationParam.get("Options OFF Text")}return Localization_Window_Options_booleanStatusText.apply(this,arguments)};const Localization_Window_Options_getConfigValue=Window_Options.prototype.getConfigValue;Window_Options.prototype.getConfigValue=function(symbol){if(symbol==="locale"){return DKTools.Localization.locale}return Localization_Window_Options_getConfigValue.apply(this,arguments)};const Localization_Window_Options_setConfigValue=Window_Options.prototype.setConfigValue;Window_Options.prototype.setConfigValue=function(symbol,volume){if(symbol==="locale"){DKTools.Localization.selectNextLocale().then(()=>{if(SceneManager.isCurrentScene(Scene_Options)){SceneManager._scene.onLocaleChange()}else{this.refresh()}})}else{Localization_Window_Options_setConfigValue.apply(this,arguments)}};class Window_MessageLanguageSwitcher extends Window_Command{initialize(){const x=LocalizationParam.get("Message Switcher X")||0;const y=LocalizationParam.get("Message Switcher Y")||0;this._windowWidth=LocalizationParam.get("Message Switcher Width")||400;super.initialize(x,y);this.selectExt(DKTools.Localization.locale);this.hide();this.close()}windowWidth(){return this._windowWidth}windowHeight(){return this.fittingHeight(1)}maxCols(){return DKTools.Localization.locales.length}makeCommandList(){DKTools.Localization.locales.forEach(locale=>{this.addCommand(locale,locale,true,locale)})}setMessageWindow(window){this._messageWindow=window}setChoiceWindow(window){this._choiceWindow=window}select(index){const lastIndex=this._index;super.select(index);if(this._messageWindow&&this._messageWindow.isOpen()){if(index>=0&&index!==lastIndex){DKTools.Localization.selectLocale(this.currentExt()).then(()=>{const originalTexts=$gameMessage.getOriginalTexts();const originalChoices=$gameMessage.getOriginalChoices();const defaultType=$gameMessage.choiceDefaultType();const cancelType=$gameMessage.choiceCancelType();if($gameMessage.isChoice()){this._choiceWindow.openness=0;this._choiceWindow.deactivate()}this._messageWindow.terminateMessage();this._messageWindow.pause=false;this._messageWindow.openness=0;this._messageWindow.update();originalTexts.forEach(text=>{$gameMessage.add(text)});$gameMessage.setChoices(originalChoices,defaultType,cancelType);this._messageWindow.startMessage()})}}}needsClose(){if($gameMessage.isNumberInput()||$gameMessage.isItemChoice()){return true}if(this._messageWindow){if(this._messageWindow.isClosed()||this._messageWindow.isClosing()){return true}}return false}update(){super.update();if(this.needsClose()){this.openness=0;this.active=false}else{const keyCode=LocalizationParam.get("Message Switcher Button");const button=Input.keyMapper[keyCode];if(Input.isTriggered(button)){if(this.isOpen()){this.close()}else{this.show();this.open()}}this.active=this.isOpen()}}}Scene_Boot.prototype.updateDocumentTitle=function(){DKTools.Localization.updateGameTitle()};const Localization_Scene_Map_createAllWindows=Scene_Map.prototype.createAllWindows;Scene_Map.prototype.createAllWindows=function(){Localization_Scene_Map_createAllWindows.apply(this,arguments);this.createLanguageSwitcherWindow()};Scene_Map.prototype.createLanguageSwitcherWindow=function(){if(!Utils.isTest()){return}this._languageSwitcherWindow=new Window_MessageLanguageSwitcher;this._languageSwitcherWindow.setMessageWindow(this._messageWindow);this._languageSwitcherWindow.setChoiceWindow(this._messageWindow._choiceWindow);this.addWindow(this._languageSwitcherWindow)};const Localization_Scene_Title_create=Scene_Title.prototype.create;Scene_Title.prototype.create=function(){Localization_Scene_Title_create.apply(this,arguments);if(this.needsSelectLanguage()){SceneManager.goto(Scene_SelectLanguage);SceneManager.prepareNextScene(Scene_Title,{firstLaunch:true});return}if(LocalizationParam.get("Show Button")){this.createLocalizationButton()}};const Localization_Scene_Title_createCommandWindow=Scene_Title.prototype.createCommandWindow;Scene_Title.prototype.createCommandWindow=function(){Localization_Scene_Title_createCommandWindow.apply(this,arguments);if(LocalizationParam.get("Show Command")){this._commandWindow.setHandler("locale",this.onCommandLocale)}};Scene_Title.prototype.createLocalizationButton=function(){const x=LocalizationParam.get("Button X");const y=LocalizationParam.get("Button Y");const filename=LocalizationParam.get("Button Graphic").format(DKTools.Localization.locale);this._localizationButton=new DKTools.Sprite.Button(x,y);this._localizationButton.loadSystem(filename);this._localizationButton.setupAnchor(.5,.5);this._localizationButton.start(true);this._localizationButton.addEvent({type:"state-pressed",onUpdate:function(){this.opacity=200;this.scale.set(.95,.95)}.bind(this._localizationButton)});this._localizationButton.addEvent({type:"state-normal",onUpdate:function(){this.opacity=255;this.scale.set(1,1)}.bind(this._localizationButton)});this._localizationButton.addEvent({type:"mouse-click-left",onUpdate:this.onCommandLocale.bind(this)});this._localizationButton.addEvent({type:"touch",onUpdate:this.onCommandLocale.bind(this)});this._localizationButton.addOneTimeEvent({type:"ready",onSuccess:function(){this.move(x+this.width/2,y+this.height/2)}.bind(this._localizationButton)});this.addChild(this._localizationButton)};Scene_Title.prototype.onCommandLocale=function(){console.log(arguments);SceneManager.push(Scene_SelectLanguage)};Scene_Title.prototype.needsSelectLanguage=function(){return LocalizationParam.get("First Launch")&&!DKTools.Localization.isLocaleFileExists()};Scene_Options.prototype.onLocaleChange=function(){if(this._optionsWindow){this._optionsWindow.refresh()}if(Imported["YEP_OptionsCore"]){if(this._categoryWindow){this._categoryWindow.refresh()}if(this._helpWindow){this._helpWindow.refresh()}}};function Scene_SelectLanguage(){this.initialize.apply(this,arguments)}Scene_SelectLanguage.prototype=Object.create(DKTools.Scene.prototype);Scene_SelectLanguage.prototype.constructor=Scene_SelectLanguage;Scene_SelectLanguage.prototype.initialize=function(){DKTools.Scene.prototype.initialize.apply(this,arguments);this._locales=DKTools.Localization.locales;this._style=LocalizationParam.get("Style")||"Window";this._styleOptions=LocalizationParam.get(`Style ${this._style}`)||{};this._options={}};Scene_SelectLanguage.prototype.prepare=function(nextScene,options={}){this._nextScene=nextScene;this._options=options};Scene_SelectLanguage.prototype.setupPreloading=function(){DKTools.Scene.prototype.setupPreloading.apply(this,arguments);const flagName=LocalizationParam.get("Flag Filename");const promises=DKTools.Localization.locales.map(locale=>{return DKTools.Utils.Bitmap.loadAsync({folder:"img/system/",filename:flagName.format(locale)})});this._preloader.add(Promise.all(promises))};Scene_SelectLanguage.prototype.createBackground=function(){const background=LocalizationParam.get("Background Filename");if(!background){return}this._background=new DKTools.Sprite;this._background.setupGraphicName(background);this._background.start();this.addChild(this._background)};Scene_SelectLanguage.prototype.createAllSprites=function(){if(this._style==="Flags"){this.createFlags()}};Scene_SelectLanguage.prototype.createAllWindows=function(){if(this._style==="Window"){this.createLanguageWindow();if(this._styleOptions["Help Window"]["Show"]){this.createHelpWindow()}}else if(this._style==="Flags"){if(this._styleOptions["Help Window"]["Show"]){this.createHelpWindow()}if(this._styleOptions["Language Window"]["Show"]){this.createLanguageNameWindow()}}};Scene_SelectLanguage.prototype.createLanguageWindow=function(){const flagName=LocalizationParam.get("Flag Filename");const fontSize=LocalizationParam.get("Font Size");const rowHeight=this._styleOptions["Row Height"];const items=this._locales.map(locale=>({name:DKTools.Localization.getLanguageByLocale(locale),symbol:"ok",handler:this.onLanguageOk.bind(this),ext:locale}));this._languageWindow=new DKTools.Window.Selectable;this._languageWindow.setupItems(items);this._languageWindow.setupItemHeight(rowHeight);this._languageWindow.setupItemDrawHandler(function(index){const language=this.itemName(index);const locale=this.itemExt(index);const rect=this.itemRectForText(index);const flag=ImageManager.loadSystem(flagName.format(locale));flag.addLoadListener(()=>{const x=rect.x+flag.width+4;this.drawBitmap(flag,{destination:{x:rect.x,y:rect.y+Math.max(0,(rect.height-flag.height)/2),height:flag.height}});this.contents.fontSize=fontSize;this.contents.drawText(language,x,rect.y,rect.width-x,rect.height,"left")})}.bind(this._languageWindow));this._languageWindow.setupSize(this._styleOptions["Window Width"],String(Math.min(this._styleOptions["Window Rows"],this._locales.length)));this._languageWindow.move((Graphics.boxWidth-this._languageWindow.width)/2,(Graphics.boxHeight-this._languageWindow.height)/2);if(!this._options.firstLaunch){this._languageWindow.setHandler("cancel",this.onLanguageCancel.bind(this))}this._languageWindow.addEvent({type:"select",onUpdate:()=>{const locale=this._languageWindow.currentExt();if(this._helpWindow){this._helpWindow.refreshAll()}this.refreshBackground(locale);this.refreshForeground(locale)}});this._languageWindow.start(true);this.addWindow(this._languageWindow)};Scene_SelectLanguage.prototype.createFlags=function(){const flagName=LocalizationParam.get("Flag Filename");this._flagSprites=this._locales.map((locale,index)=>{const sprite=new DKTools.Sprite.Button;const selectHandler=function(){if(this._index===sprite.id){if(this._styleOptions["Play Ok Sound"]){SoundManager.playOk()}this.onLanguageOk()}else{if(this._styleOptions["Play Cursor Sound"]){SoundManager.playCursor()}this.selectFlag(sprite.id)}}.bind(this);sprite.id=index;sprite.anchor.set(.5,.5);sprite.setupGraphicName(flagName.format(locale));sprite.addEvent({type:"mouse-click-left",onUpdate:selectHandler});sprite.addEvent({type:"touch",onUpdate:selectHandler});sprite.start(true);return sprite});this.addChild(...this._flagSprites);this.selectFlag(0)};Scene_SelectLanguage.prototype.createHelpWindow=function(){const fontSize=LocalizationParam.get("Font Size");const params=this._styleOptions["Help Window"];const width=eval(params["Width"]);const x=(Graphics.boxWidth-width)/2;const y=eval(params["Y"]);const height="1";this._helpWindow=new DKTools.Window(x,y,width,height);this._helpWindow.contentsSprite.setupFont({fontSize:fontSize});this._helpWindow.addEvent({type:"draw-all",onUpdate:()=>{const index=this._style==="Window"?this._languageWindow.index():this._index;const locale=this._locales[index];const helpText=DKTools.Localization.getHelpText(locale);if(!helpText){throw new Error(`Could not find help text for the locale: ${locale}`)}this._helpWindow.drawText(helpText)}});if(!params["Show Frame"]){this._helpWindow.hideFrame()}if(params["Background Opacity"]>0){this._helpWindow.backOpacity=params["Background Opacity"]}else if(params["Background Opacity"]===0){this._helpWindow.hideBack()}this._helpWindow.start();this.addWindow(this._helpWindow)};Scene_SelectLanguage.prototype.createLanguageNameWindow=function(){const fontSize=LocalizationParam.get("Font Size");const params=this._styleOptions["Language Window"];const width=eval(params["Width"]);const x=(Graphics.boxWidth-width)/2;const y=eval(params["Y"]);const height="1";this._languageNameWindow=new DKTools.Window(x,y,width,height);this._languageNameWindow.contentsSprite.setupFont({fontSize:fontSize});this._languageNameWindow.addEvent({type:"draw-all",onUpdate:()=>{const language=DKTools.Localization.getLanguageByLocale(this._locales[this._index]);this._languageNameWindow.drawText(language)}});if(!params["Show Frame"]){this._languageNameWindow.hideFrame()}if(params["Background Opacity"]>0){this._languageNameWindow.backOpacity=params["Background Opacity"]}else if(params["Background Opacity"]===0){this._languageNameWindow.hideBack()}this._languageNameWindow.start();this.addWindow(this._languageNameWindow)};Scene_SelectLanguage.prototype.createForeground=function(){const foreground=LocalizationParam.get("Foreground Filename");if(!foreground){return}this._foreground=new DKTools.Sprite;this._foreground.setupGraphicName(foreground);this._foreground.start();this.addChild(this._foreground)};Scene_SelectLanguage.prototype.start=function(){DKTools.Scene.prototype.start.apply(this,arguments);if(this._options.firstLaunch){const type=LocalizationParam.get("First Launch Cursor")||"auto";let locale;if(type==="auto"){locale=this._locales.find(locale=>locale===window.navigator.language||window.navigator.language.match(new RegExp(`^${locale}`)))}else if(type==="primary"){locale=DKTools.Localization.getPrimaryLocale()}if(locale){if(this._style==="Window"){this._languageWindow.selectExt(locale)}else{const index=this._locales.indexOf(locale);if(this._index!==index){this.selectFlag(index)}}}}else{if(this._style==="Window"){this._languageWindow.selectExt(DKTools.Localization.locale)}else{const index=this._locales.indexOf(DKTools.Localization.locale);if(this._index!==index){this.selectFlag(index)}}}const bgm=LocalizationParam.get("BGM");if(bgm&&bgm["BGM"]){AudioManager.playBgm({name:bgm["BGM"],volume:bgm["Volume"]||90,pan:bgm["Pan"]||0,pitch:bgm["Pitch"]||100})}};Scene_SelectLanguage.prototype._getFlagAnimation=function(sprite){const options=this._styleOptions["Flag Animation"];const repeatTime=options["Duration"];const animation=new DKTools.Animation({type:"update",repeatTime:repeatTime});animation.addAction(DKTools.Animation.Action.Scale({target:sprite,startTime:0,endTime:repeatTime/2,data:new Point(options["Min Scale"],options["Min Scale"])}));animation.addAction(DKTools.Animation.Action.Scale({target:sprite,startTime:repeatTime/2,endTime:repeatTime,data:new Point(options["Max Scale"],options["Max Scale"])}));return animation};Scene_SelectLanguage.prototype.onLanguageOk=function(){if(this._style==="Window"){DKTools.Localization.selectLocale(this._languageWindow.currentExt())}else{DKTools.Localization.selectLocale(this._locales[this._index])}this.fadeOutAll();this.popScene()};Scene_SelectLanguage.prototype.onLanguageCancel=function(){this.fadeOutAll();this.popScene()};Scene_SelectLanguage.prototype.popScene=function(){if(this._nextScene){SceneManager.goto(this._nextScene)}else{DKTools.Scene.prototype.popScene.apply(this,arguments)}};Scene_SelectLanguage.prototype.selectFlag=function(index){this._index=index;if(this._helpWindow){this._helpWindow.refreshAll()}if(this._languageNameWindow){this._languageNameWindow.refreshAll()}this.refreshBackground(this._locales[index]);this.refreshForeground(this._locales[index]);this.updateFlagsPlacement()};Scene_SelectLanguage.prototype.refreshBackground=function(locale){if(this._background){const filename=LocalizationParam.get("Background Filename");DKTools.Utils.Bitmap.load({folder:DKTools.Localization.getImageFolder("img/system/",filename,locale),filename:filename,listener:bitmap=>{this._background.setBitmap(bitmap)}})}};Scene_SelectLanguage.prototype.refreshForeground=function(locale){if(this._foreground){const filename=LocalizationParam.get("Foreground Filename");DKTools.Utils.Bitmap.load({folder:DKTools.Localization.getImageFolder("img/system/",filename,locale),filename:filename,listener:bitmap=>{this._foreground.setBitmap(bitmap)}})}};Scene_SelectLanguage.prototype.updateFlagsPlacement=function(){this._flagSprites.forEach(sprite=>sprite.hide());const animationOptions=this._styleOptions["Flag Animation"]||{};const central=this._flagSprites[this._index];const scale=new Point(this._styleOptions["Side Flags"]["Scale"],this._styleOptions["Side Flags"]["Scale"]);const opacity=this._styleOptions["Side Flags"]["Opacity"];central.show(true);central.scale.set(1,1);central.opacity=255;central.move(Graphics.boxWidth/2,Graphics.boxHeight/2);if(animationOptions["Enabled"]){if(this._animation){this._animation.finish(true)}this._animation=this._getFlagAnimation(central);this._eventsManager.addAnimation(this._animation)}let showLeft=false;let showRight=false;if(this._styleOptions["Loop Scroll"]&&this._locales.length>2){showLeft=true;showRight=true}else if(this._index===0){showRight=true}else if(this._index===DKTools.Localization.locales.length-1){showLeft=true}else{showLeft=true;showRight=true}if(showLeft){let left=this._flagSprites[this._index-1];if(!left&&this._styleOptions["Loop Scroll"]&&this._locales.length>2){left=this._flagSprites[this._locales.length-1]}if(left){left.show(true);left.scale.copy(scale);left.opacity=opacity;const x=eval(this._styleOptions["Side Flags"]["Left Flag X"]);const y=Graphics.boxHeight/2;left.move(x,y)}}if(showRight){let right=this._flagSprites[this._index+1];if(!right&&this._styleOptions["Loop Scroll"]&&this._locales.length>2){right=this._flagSprites[0]}if(right){right.show(true);right.scale.copy(scale);right.opacity=opacity;const x=eval(this._styleOptions["Side Flags"]["Right Flag X"]);const y=Graphics.boxHeight/2;right.move(x,y)}}};Scene_SelectLanguage.prototype.updateFlagsInput=function(){if(this._style==="Window"){return}const scrollRight=(Input.isRepeated("right")||this._styleOptions["Mouse Scroll"]&&TouchInput.wheelY>0)&&(this._index<DKTools.Localization.locales.length-1||this._styleOptions["Loop Scroll"]);const scrollLeft=(Input.isRepeated("left")||this._styleOptions["Mouse Scroll"]&&TouchInput.wheelY<0)&&(this._index>0||this._styleOptions["Loop Scroll"]);if(scrollRight){if(this._styleOptions["Play Cursor Sound"]){SoundManager.playCursor()}if(this._index+1<this._locales.length){this.selectFlag(this._index+1)}else{this.selectFlag(0)}}else if(scrollLeft){if(this._styleOptions["Play Cursor Sound"]){SoundManager.playCursor()}if(this._index>0){this.selectFlag(this._index-1)}else{this.selectFlag(this._locales.length-1)}}else if(Input.isTriggered("ok")){if(this._styleOptions["Play Ok Sound"]){SoundManager.playOk()}this.onLanguageOk()}else if(!this._options.firstLaunch&&(Input.isTriggered("cancel")||TouchInput.isCancelled())){if(this._styleOptions["Play Cancel Sound"]){SoundManager.playCancel()}this.onLanguageCancel()}};Scene_SelectLanguage.prototype.update=function(){DKTools.Scene.prototype.update.apply(this,arguments);if(!this.isBusy()){this.updateFlagsInput()}};if(Imported["YEP_MessageCore"]){Game_System.prototype.initMessageFontSettings=function(){if(this.isChinese()){this._msgFontName=Yanfly.Param.MSGCNFontName}else if(this.isKorean()){this._msgFontName=Yanfly.Param.MSGKRFontName}else{this._msgFontName=Yanfly.Param.MSGFontName}this._msgFontSize=Yanfly.Param.MSGFontSize;this._msgFontOutline=Yanfly.Param.MSGFontOutline};const Localization_Window_Message_convertNameBox=Window_Message.prototype.convertNameBox;Window_Message.prototype.convertNameBox=function(text){text=text.replace(/\x1bMN\<(.*?)\>/gi,function(){return Yanfly.nameWindow.refresh(arguments[1],1)},this);text=text.replace(/\x1bMN1\<(.*?)\>/gi,function(){return Yanfly.nameWindow.refresh(arguments[1],1)},this);text=text.replace(/\x1bMN2\<(.*?)\>/gi,function(){return Yanfly.nameWindow.refresh(arguments[1],2)},this);text=text.replace(/\x1bMN3\<(.*?)\>/gi,function(){return Yanfly.nameWindow.refresh(arguments[1],3)},this);text=text.replace(/\x1bMNC\<(.*?)\>/gi,function(){return Yanfly.nameWindow.refresh(arguments[1],3)},this);text=text.replace(/\x1bMN4\<(.*?)\>/gi,function(){return Yanfly.nameWindow.refresh(arguments[1],4)},this);text=text.replace(/\x1bMN5\<(.*?)\>/gi,function(){return Yanfly.nameWindow.refresh(arguments[1],5)},this);text=text.replace(/\x1bMNR\<(.*?)\>/gi,function(){return Yanfly.nameWindow.refresh(arguments[1],5)},this);return Localization_Window_Message_convertNameBox.call(this,text)};DKTools.Localization.addChangeLocaleListener(()=>{$gameSystem.initMessageFontSettings()})}if(Imported["YEP_QuestJournal"]){const Localization_Window_QuestData_drawQuestTextEx=Window_QuestData.prototype.drawQuestTextEx;Window_QuestData.prototype.drawQuestTextEx=function(text,x,y){return Localization_Window_QuestData_drawQuestTextEx.call(this,DKTools.Localization.getText(text),x,y)}}if(Imported["CGMV_Encyclopedia"]){const Localization_CGMV_Encyclopedia_prototype_initializeData=CGMV_Encyclopedia.prototype.initializeData;CGMV_Encyclopedia.prototype.initializeData=function(array,length,symbol){CGMV.Encyclopedia.HalfEncounterText=DKTools.Localization.getText(CGMV.Encyclopedia.HalfEncounterText);CGMV.Encyclopedia.NoEncounterText=DKTools.Localization.getText(CGMV.Encyclopedia.NoEncounterText);CGMV.Encyclopedia.CancelSurpriseText=DKTools.Localization.getText(CGMV.Encyclopedia.CancelSurpriseText);CGMV.Encyclopedia.RaisePreemptiveText=DKTools.Localization.getText(CGMV.Encyclopedia.RaisePreemptiveText);CGMV.Encyclopedia.GoldDoubleText=DKTools.Localization.getText(CGMV.Encyclopedia.GoldDoubleText);CGMV.Encyclopedia.DropItemDoubleText=DKTools.Localization.getText(CGMV.Encyclopedia.DropItemDoubleText);Localization_CGMV_Encyclopedia_prototype_initializeData.apply(this,arguments)};const Localization_CGMV_Window_EncyclopediaDisplay_drawEncyclopediaMeta=CGMV_Window_EncyclopediaDisplay.prototype.drawEncyclopediaMeta;CGMV_Window_EncyclopediaDisplay.prototype.drawEncyclopediaMeta=function(meta,y){return Localization_CGMV_Window_EncyclopediaDisplay_drawEncyclopediaMeta.call(this,DKTools.Localization.getText(meta),y)};const Localization_CGMV_Window_EncyclopediaDisplay_drawEncyclopediaDescription=CGMV_Window_EncyclopediaDisplay.prototype.drawEncyclopediaDescription;CGMV_Window_EncyclopediaDisplay.prototype.drawEncyclopediaDescription=function(description,y){return Localization_CGMV_Window_EncyclopediaDisplay_drawEncyclopediaDescription.call(this,DKTools.Localization.getText(description),y)}}